<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>php特性刷题</title>
      <link href="/2025/01/02/Yohane-Mashiro/ctfshow/php%E7%89%B9%E6%80%A7%E5%88%B7%E9%A2%98/"/>
      <url>/2025/01/02/Yohane-Mashiro/ctfshow/php%E7%89%B9%E6%80%A7%E5%88%B7%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="web89"><a class="markdownIt-Anchor" href="#web89"></a> web89</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># @Author: h1xa</span><br><span class="line"># @Date:   2020-09-16 11:25:09</span><br><span class="line"># @Last Modified by:   h1xa</span><br><span class="line"># @Last Modified time: 2020-09-18 15:38:51</span><br><span class="line"># @email: h1xa@ctfer.com</span><br><span class="line"># @link: https://ctfer.com</span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">include(&quot;flag.php&quot;);</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line"></span><br><span class="line">if(isset($_GET[&#x27;num&#x27;]))&#123;</span><br><span class="line">    $num = $_GET[&#x27;num&#x27;];</span><br><span class="line">    if(preg_match(&quot;/[0-9]/&quot;, $num))&#123;</span><br><span class="line">        die(&quot;no no no!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if(intval($num))&#123;</span><br><span class="line">        echo $flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>preg_match:<br />执行一个正则表达式匹配。<br />intval():<br />用于获取变量的整数值</p><p>intval() 函数通过使用指定的进制 base 转换（默认是十进制），返回变量 var 的 integer 数值。 intval() 不能用于 object，否则会产生 E_NOTICE 错误并返回 1。<br />PHP 4, PHP 5, PHP 7</p><p>如果 base 是 0，通过检测 var 的格式来决定使用的进制：<br />如果字符串包括了 “0x” (或 “0X”) 的前缀，使用 16 进制 (hex)；否则，<br />如果字符串以 “0” 开始，使用 8 进制(octal)；否则，<br />将使用 10 进制 (decimal)。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo intval(42);                      // 42</span><br><span class="line">echo intval(4.2);                     // 4</span><br><span class="line">echo intval(&#x27;42&#x27;);                    // 42</span><br><span class="line">echo intval(&#x27;+42&#x27;);                   // 42</span><br><span class="line">echo intval(&#x27;-42&#x27;);                   // -42</span><br><span class="line">echo intval(042);                     // 34</span><br><span class="line">echo intval(&#x27;042&#x27;);                   // 42</span><br><span class="line">echo intval(1e10);                    // 10000000000</span><br><span class="line">echo intval(&#x27;1e10&#x27;);                  // 10000000000</span><br><span class="line">echo intval(0x1A);                    // 26</span><br><span class="line">echo intval(42000000);                // 42000000</span><br><span class="line">echo intval(420000000000000000000);   // 0</span><br><span class="line">echo intval(&#x27;420000000000000000000&#x27;); // 2147483647</span><br><span class="line">echo intval(42, 8);                   // 42</span><br><span class="line">echo intval(&#x27;42&#x27;, 8);                 // 34</span><br><span class="line">echo intval(array());                 // 0</span><br><span class="line">echo intval(array(&#x27;foo&#x27;, &#x27;bar&#x27;));     // 1</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">num[]=1</span><br></pre></td></tr></table></figure><h3 id="web90"><a class="markdownIt-Anchor" href="#web90"></a> web90</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># @Author: h1xa</span><br><span class="line"># @Date:   2020-09-16 11:25:09</span><br><span class="line"># @Last Modified by:   h1xa</span><br><span class="line"># @Last Modified time: 2020-09-18 16:06:11</span><br><span class="line"># @email: h1xa@ctfer.com</span><br><span class="line"># @link: https://ctfer.com</span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">include(&quot;flag.php&quot;);</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">if(isset($_GET[&#x27;num&#x27;]))&#123;</span><br><span class="line">    $num = $_GET[&#x27;num&#x27;];</span><br><span class="line">    if($num===&quot;4476&quot;)&#123;</span><br><span class="line">        die(&quot;no no no!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if(intval($num,0)===4476)&#123;</span><br><span class="line">        echo $flag;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        echo intval($num,0);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">num=0x117c</span><br><span class="line">num=4476a</span><br></pre></td></tr></table></figure><h3 id="web91"><a class="markdownIt-Anchor" href="#web91"></a> web91</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># @Author: Firebasky</span><br><span class="line"># @Date:   2020-09-16 11:25:09</span><br><span class="line"># @Last Modified by:   h1xa</span><br><span class="line"># @Last Modified time: 2020-09-18 16:16:09</span><br><span class="line"># @link: https://ctfer.com</span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">show_source(__FILE__);</span><br><span class="line">include(&#x27;flag.php&#x27;);</span><br><span class="line">$a=$_GET[&#x27;cmd&#x27;];</span><br><span class="line">if(preg_match(&#x27;/^php$/im&#x27;, $a))&#123;</span><br><span class="line">    if(preg_match(&#x27;/^php$/i&#x27;, $a))&#123;</span><br><span class="line">        echo &#x27;hacker&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">        echo $flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">    echo &#x27;nonononono&#x27;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>im模式是可以匹配很多行<br />i模式只能匹配一行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cmd=php%0a1</span><br><span class="line">cmd=%0aphp</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Yohane-Mashiro </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> 刷题 </tag>
            
            <tag> ctfshow_php特性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见的php伪协议</title>
      <link href="/2025/01/02/Yohane-Mashiro/SSRF/php%E4%BC%AA%E5%8D%8F%E8%AE%AE/"/>
      <url>/2025/01/02/Yohane-Mashiro/SSRF/php%E4%BC%AA%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<p>转载自<a href="https://blog.starlit.icu/2025/01/02/web/ssrf/%E7%AE%80%E4%BB%8B/">とある晨曦の幻想乡</a></p><h3 id="1-file-协议"><a class="markdownIt-Anchor" href="#1-file-协议"></a> 1. <strong>file:// 协议</strong></h3><h4 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> <strong>概述</strong>：</h4><p><code>file://</code> 是一种用于访问本地文件系统的协议。在 URL 中，它指示访问本地计算机的文件。例如：</p><ul><li><code>file:///etc/passwd</code>（Linux系统中）</li><li><code>file:///C:/Windows/System32/drivers/etc/hosts</code>（Windows系统中）</li></ul><p>它是一个用于本地文件的 URI 协议，表示在本地计算机上读取文件的路径。</p><h4 id="常见用途"><a class="markdownIt-Anchor" href="#常见用途"></a> <strong>常见用途</strong>：</h4><ul><li><strong>文件访问</strong>：它允许直接访问本地文件系统中的文件。这个协议通常用于 Web 浏览器中查看本地文件。</li><li><strong>浏览器功能</strong>：某些浏览器允许用户输入 <code>file://</code> URL 来查看本地文件，而不通过HTTP或FTP。</li></ul><h4 id="攻击场景"><a class="markdownIt-Anchor" href="#攻击场景"></a> <strong>攻击场景</strong>：</h4><p>如果 Web 应用没有正确验证和过滤用户输入，攻击者可能构造类似于 <code>file://</code> 的路径来访问本地敏感文件。典型攻击案例包括：</p><ul><li><strong>读取敏感文件</strong>：攻击者可以提交类似 <code>file:///etc/passwd</code>（Linux）或 <code>file:///C:/Windows/System32/config/systemprofile</code>（Windows）这样的路径来读取本地敏感文件。</li><li><strong>SSRF（Server-Side Request Forgery）攻击</strong>：攻击者通过利用 SSRF 漏洞，将服务器请求引导到本地文件系统，读取服务器上的敏感数据，如 <code>/etc/shadow</code>、数据库配置文件等。</li></ul><hr /><h3 id="2-dict-协议"><a class="markdownIt-Anchor" href="#2-dict-协议"></a> 2. <strong>dict:// 协议</strong></h3><h4 id="概述-2"><a class="markdownIt-Anchor" href="#概述-2"></a> <strong>概述</strong>：</h4><p><code>dict://</code> 协议用于连接到 <strong>Dictionary Protocol</strong> 服务。字典协议（DICT）是一种用于访问在线字典的协议，它允许客户端通过互联网查询词汇定义。<code>dict://</code> 协议的 URL 通常用于指示一个字典服务器和要查询的词条。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dict://dict.org/merriam-webster/word</span><br></pre></td></tr></table></figure><p>此 URL 会请求连接到 <code>dict.org</code> 的字典服务，并查询 <code>merriam-webster</code> 词条下的 <code>word</code> 内容。</p><h4 id="常见用途-2"><a class="markdownIt-Anchor" href="#常见用途-2"></a> <strong>常见用途</strong>：</h4><ul><li><strong>字典查询</strong>：用户可以通过 <code>dict://</code> 协议访问各种公共或私人的字典服务器，获取词汇和术语的定义。</li><li><strong>教育和参考</strong>：这种协议可以用于访问科学、技术和文学领域的专业词汇。</li></ul><h4 id="攻击场景-2"><a class="markdownIt-Anchor" href="#攻击场景-2"></a> <strong>攻击场景</strong>：</h4><p>虽然 <code>dict://</code> 协议本身并不会直接引发严重的安全问题，但如果 Web 应用错误地处理它，可能会导致一些间接的攻击机会。例如：</p><ul><li><strong>SSR攻击</strong>：攻击者如果能够控制 Web 应用输入的 URL，可能诱使应用通过 <code>dict://</code> 协议访问敏感内网资源（比如某些内部字典服务或数据库），从而泄露数据。</li><li><strong>暴露内部字典服务</strong>：某些应用可能通过 <code>dict://</code> 协议连接到内部的字典服务，如果攻击者可以操控输入，可能会导致未授权的服务访问，进而泄露信息。</li></ul><hr /><h3 id="3-gopher-协议"><a class="markdownIt-Anchor" href="#3-gopher-协议"></a> 3. <strong>gopher:// 协议</strong></h3><h4 id="概述-3"><a class="markdownIt-Anchor" href="#概述-3"></a> <strong>概述</strong>：</h4><p><code>gopher://</code> 协议源自早期的互联网协议 Gopher，它是一种用于信息检索的协议，允许用户通过结构化的层次目录访问信息。虽然 Gopher 协议已经过时，但仍然存在一些遗留的 Gopher 服务器，供用户访问文件、文档等信息。</p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gopher://gopher.floodgap.com/1/0/1/textfile.txt</span><br></pre></td></tr></table></figure><p>这将连接到一个 Gopher 服务器，下载 <code>textfile.txt</code> 文件。</p><h4 id="常见用途-3"><a class="markdownIt-Anchor" href="#常见用途-3"></a> <strong>常见用途</strong>：</h4><ul><li><strong>信息检索</strong>：Gopher 协议原本用于提供结构化的文本和信息检索，类似于早期的网络搜索引擎。</li><li><strong>教育和档案</strong>：一些旧的 Gopher 服务仍然在使用，用于存档资料或作为怀旧用途。</li></ul><h4 id="攻击场景-3"><a class="markdownIt-Anchor" href="#攻击场景-3"></a> <strong>攻击场景</strong>：</h4><p>与 <code>file://</code> 和 <code>dict://</code> 协议相比，<code>gopher://</code> 协议的安全问题更加隐蔽，可能会被错误地使用或滥用。攻击者可以利用 SSRF 漏洞通过 <code>gopher://</code> 协议发起请求，尝试访问内网服务或获取信息。例如：</p><ul><li><strong>内部服务扫描</strong>：攻击者可以通过 Gopher 协议扫描目标 Web 应用所在网络中的内网服务。例如，可以利用 <code>gopher://127.0.0.1:8000</code> 来访问内网服务。</li><li><strong>信息泄露</strong>：攻击者可能通过 Gopher 协议访问目标服务器的未授权端口，泄露敏感的内部信息。</li></ul><hr />]]></content>
      
      
      <categories>
          
          <category> Yohane-Mashiro </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> php伪协议 </tag>
            
            <tag> SSRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSRF简介</title>
      <link href="/2025/01/02/Yohane-Mashiro/SSRF/%E7%AE%80%E4%BB%8B/"/>
      <url>/2025/01/02/Yohane-Mashiro/SSRF/%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<p>转载自<a href="https://blog.starlit.icu/2025/01/02/web/ssrf/%E7%AE%80%E4%BB%8B/">とある晨曦の幻想乡</a></p><h3 id="ssrfserver-side-request-forgery服务器端请求伪造的原理"><a class="markdownIt-Anchor" href="#ssrfserver-side-request-forgery服务器端请求伪造的原理"></a> SSRF（Server-Side Request Forgery，服务器端请求伪造）的原理</h3><p>SSRF（服务器端请求伪造）是一种攻击技术，攻击者通过操控一个Web应用发起伪造的请求，从而欺骗目标服务器，导致服务器向攻击者指定的地址（可能是外部服务器，也可能是内网地址）发起请求。这类攻击利用了服务器本身的网络访问权限，通常可以绕过防火墙和网络隔离，访问原本无法访问的资源，进而引发数据泄露、系统入侵等安全问题。</p><p>SSRF的关键在于通过<strong>操控Web应用的请求机制</strong>来访问原本不可访问的服务。攻击者并不直接与目标服务器交互，而是通过漏洞利用Web服务器发起恶意请求。</p><h3 id="ssrf攻击的工作流程"><a class="markdownIt-Anchor" href="#ssrf攻击的工作流程"></a> SSRF攻击的工作流程</h3><ol><li><p><strong>攻击者输入恶意数据</strong>：攻击者通过Web应用的输入点提交恶意URL或地址。这些输入点通常是用户可以控制的字段，如Web表单、URL参数、文件上传等。</p></li><li><p><strong>Web应用发起请求</strong>：Web应用将攻击者提交的恶意输入当作目标URL或地址，并通过后端代码（如HTTP请求库）发起请求。此时，Web应用扮演了请求发起者的角色，攻击者的恶意请求通过Web服务器发起。</p></li><li><p><strong>恶意请求触发访问</strong>：根据攻击者提供的恶意URL或地址，Web应用可能会访问内部资源（如内网的API、管理接口或数据库服务）或者外部资源（如攻击者控制的恶意网站）。</p></li><li><p><strong>返回的响应被利用</strong>：如果Web应用未正确处理这些请求，攻击者可能通过返回的数据进行进一步的攻击，例如泄露敏感信息、获取内网服务的返回数据、进行端口扫描等。</p></li><li><p><strong>利用网络环境漏洞</strong>：通过SSRF，攻击者可以利用目标服务器的内网权限绕过防火墙、网络隔离等安全策略，访问本不应该暴露的服务和数据。</p></li></ol><hr /><h3 id="ssrf的攻击场景"><a class="markdownIt-Anchor" href="#ssrf的攻击场景"></a> SSRF的攻击场景</h3><p>SSRF攻击通常发生在以下几种场景中：</p><ol><li><p><strong>URL输入漏洞</strong><br />用户通过Web应用提交一个URL，Web应用会尝试访问这个URL，常见的例子包括：</p><ul><li>允许用户提交URL的文件下载功能</li><li>允许用户输入URL并在Web页面中显示其内容</li><li>通过URL查询外部API或获取资源</li></ul></li><li><p><strong>文件上传漏洞</strong><br />Web应用可能允许用户上传文件，并对上传的文件进行处理。如果Web应用在文件上传时需要根据上传内容的URL进行请求，攻击者可以上传带有恶意URL的文件（如包含<code>http://localhost/admin</code>的图片或其他格式的文件）。</p></li><li><p><strong>HTTP请求头恶意伪造</strong><br />一些应用会根据请求头的内容（如<code>X-Forwarded-For</code>、<code>Host</code>等）发起请求。攻击者可以伪造这些头信息，诱使Web应用访问内网服务。</p></li><li><p><strong>其他网络请求功能</strong><br />Web应用可能有其他类型的网络请求功能，如发送HTTP请求以获取数据，或在后台进行Web抓取。攻击者可以通过伪造请求的目标来控制访问内网或外部资源。</p></li></ol><hr /><h3 id="ssrf攻击的常见利用方法"><a class="markdownIt-Anchor" href="#ssrf攻击的常见利用方法"></a> SSRF攻击的常见利用方法</h3><ol><li><p><strong>内网服务扫描</strong><br />通过SSRF，攻击者可以扫描目标Web服务器所在的内网，发现本来应该无法访问的内网服务。例如，通过访问<code>http://localhost:8080</code>，攻击者可以访问目标服务器的本地管理接口、数据库服务等。</p></li><li><p><strong>信息泄漏</strong><br />SSRF攻击可能导致内部资源的泄漏。例如，攻击者可以通过访问<code>http://localhost:9200</code>来扫描和获取Elasticsearch数据库的敏感信息，或通过访问<code>http://127.0.0.1:5000</code>获取内网API的返回数据。</p></li><li><p><strong>端口扫描</strong><br />攻击者可以通过控制请求目标地址和端口进行端口扫描，识别目标服务器所在内网的开放端口。例如，攻击者可以利用SSRF通过请求<code>http://localhost:1-65535</code>来扫描目标服务器所有的端口。</p></li><li><p><strong>服务绕过</strong><br />有些Web应用配置了IP白名单或防火墙，阻止来自外部的直接访问。攻击者可以通过SSR攻击发起来自Web应用服务器的请求，从而绕过这些安全机制。</p></li><li><p><strong>利用内网API或管理面板</strong><br />Web服务器可能会访问内部的管理系统、API或其他受保护的资源。攻击者通过SSRF访问这些资源，可能会获取敏感数据、执行管理命令或修改系统设置。</p></li></ol><hr /><h3 id="ssrf攻击的例子"><a class="markdownIt-Anchor" href="#ssrf攻击的例子"></a> SSRF攻击的例子</h3><h4 id="例子1url作为参数"><a class="markdownIt-Anchor" href="#例子1url作为参数"></a> 例子1：URL作为参数</h4><p>假设有一个Web应用，它允许用户输入一个URL并返回该URL指向的资源。攻击者可以提交恶意的URL，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/admin</span><br></pre></td></tr></table></figure><p>Web应用会尝试从<code>localhost</code>请求该资源，而实际上<code>localhost</code>是Web服务器的内部地址，可能会导致访问敏感的管理接口，泄露后台管理页面。</p><h4 id="例子2文件上传"><a class="markdownIt-Anchor" href="#例子2文件上传"></a> 例子2：文件上传</h4><p>假设某个Web应用允许用户上传图片，攻击者上传一个图片文件，并在图片的元数据中嵌入恶意的URL（如<code>http://127.0.0.1:8080/api</code>）。当应用处理文件时，它会访问该URL，从而使攻击者能够访问内网资源。</p><hr /><h3 id="防御ssrf的策略"><a class="markdownIt-Anchor" href="#防御ssrf的策略"></a> 防御SSRF的策略</h3><ol><li><p><strong>限制服务器请求的目标范围</strong><br />在Web应用服务器中，使用防火墙或网络访问控制列表（ACL）来限制请求的目标范围，禁止访问<code>localhost</code>、<code>127.0.0.1</code>、内网IP地址（如<code>192.168.x.x</code>、<code>10.x.x.x</code>）等。</p></li><li><p><strong>严格校验输入的URL</strong><br />对用户输入的URL进行严格校验，防止请求内网资源。可以通过正则表达式、白名单等方式限制允许的域名和IP地址。拒绝掉本地地址（如<code>localhost</code>、<code>127.0.0.1</code>等）和不可访问的IP段。</p></li><li><p><strong>限制HTTP请求头</strong><br />在HTTP请求中，某些头信息（如<code>X-Forwarded-For</code>、<code>Host</code>、<code>Referer</code>）可以被恶意伪造。要确保对这些头信息进行严格校验，防止攻击者通过伪造请求头进行绕过。</p></li><li><p><strong>使用请求代理</strong><br />在发起外部请求时，使用请求代理来控制外部请求的来源，减少Web服务器直接发起恶意请求的风险。</p></li><li><p><strong>输出过滤和响应校验</strong><br />对返回的内容进行适当的过滤和检查，确保不泄露内部敏感信息。例如，不应将堆栈信息、错误信息等直接返回给用户。</p></li><li><p><strong>日志审计</strong><br />对Web服务器的请求进行详细日志记录，尤其是外部请求。审计异常请求、未授权访问等，帮助发现潜在的SSRF攻击行为。</p></li></ol><hr />]]></content>
      
      
      <categories>
          
          <category> Yohane-Mashiro </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> SSRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSRF刷题</title>
      <link href="/2025/01/02/Yohane-Mashiro/ctfshow/SSRF%E5%88%B7%E9%A2%98/"/>
      <url>/2025/01/02/Yohane-Mashiro/ctfshow/SSRF%E5%88%B7%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="web351"><a class="markdownIt-Anchor" href="#web351"></a> web351</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">url=http://127.0.0.1/flag.php</span><br><span class="line">url=http://localhost/flag.php</span><br></pre></td></tr></table></figure><h3 id="web352"><a class="markdownIt-Anchor" href="#web352"></a> web352</h3><p>这里过滤了localhost和127.0.0.1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">url=http://0/flag.php #在Linux中，0也会被解析成127.0.0.1</span><br><span class="line">url=http://127.255.255.254/flag.php </span><br><span class="line">url=http://127.1/flag.php #127.1会被解析成127.0.0.1，也就意味着为零可缺省</span><br><span class="line">url=http://2130706433/flag.php</span><br></pre></td></tr></table></figure><h3 id="web353"><a class="markdownIt-Anchor" href="#web353"></a> web353</h3><p>这里过滤了localhost和127.0.0.1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">url=http://0/flag.php</span><br><span class="line">url=http://2130706433/flag.php</span><br></pre></td></tr></table></figure><h3 id="web354"><a class="markdownIt-Anchor" href="#web354"></a> web354</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url=http://sudo.cc/flag.php</span><br></pre></td></tr></table></figure><p>查来的，我也不知道为什么。</p><h3 id="web355"><a class="markdownIt-Anchor" href="#web355"></a> web355</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">url=http://0/flag.php</span><br><span class="line">url=http://127.1/flag.php</span><br></pre></td></tr></table></figure><p>if((strlen($host)&lt;=5))：长度小于5</p>]]></content>
      
      
      <categories>
          
          <category> Yohane-Mashiro </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> 刷题 </tag>
            
            <tag> ctfshow_ssrf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>目录爆破工具</title>
      <link href="/2024/12/26/Yohane-Mashiro/project/dri-blast/"/>
      <url>/2024/12/26/Yohane-Mashiro/project/dri-blast/</url>
      
        <content type="html"><![CDATA[<h1 id="dir-blast-目录爆破"><a class="markdownIt-Anchor" href="#dir-blast-目录爆破"></a> dir-blast （目录爆破）</h1><p>闲的发慌，顺手做了这个小工具<br />项目地址：<a href="https://github.com/Yohane-Mashiro/dir-blast">Ciallo～(∠・ω＜)⌒☆</a><br />一个用于 CTF 的快速目录扫描工具<br />希望有用吧</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">--------------------------------------------------------------</span><br><span class="line">|      _   _                  _       _                 _    |</span><br><span class="line">|   __| | (_)  _ __          | |__   | |   __ _   ___  | |   |</span><br><span class="line">|  / _` | | | | &#x27;__|  _____  | &#x27;_ \  | |  / _` | / __| | __| |</span><br><span class="line">| | (_| | | | | |    |_____| | |_) | | | | (_| | \__ \ | |_  |</span><br><span class="line">|  \__,_| |_| |_|            |_.__/  |_|  \__,_| |___/  \__| |</span><br><span class="line">--------------------------------------------------------------</span><br></pre></td></tr></table></figure><h2 id="功能"><a class="markdownIt-Anchor" href="#功能"></a> 功能</h2><ul><li>使用字典文件对目标 URL 进行目录暴力破解</li><li>支持多线程，提高扫描速度</li></ul><h2 id="使用方法"><a class="markdownIt-Anchor" href="#使用方法"></a> 使用方法</h2><h3 id="从源码运行"><a class="markdownIt-Anchor" href="#从源码运行"></a> 从源码运行</h3><ol><li>克隆仓库到本地： <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/Yohane-Mashiro/dir-blast.git</span><br></pre></td></tr></table></figure></li><li>进入项目目录： <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> dir-blast</span><br></pre></td></tr></table></figure></li><li>安装依赖： <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure></li><li>运行脚本： <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python main.py -u &lt;目标URL&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="使用-release"><a class="markdownIt-Anchor" href="#使用-release"></a> 使用 Release</h3><p>你也可以从 <a href="https://github.com/Yohane-Mashiro/dir-blast/releases">Release 页面</a> 下载最新的可执行文件。</p><h2 id="参数说明"><a class="markdownIt-Anchor" href="#参数说明"></a> 参数说明</h2><ul><li><code>-u</code> 或 <code>--url</code>：目标 URL 地址（必填）</li><li><code>-w</code> 或 <code>--wordlist</code>：字典文件路径（默认: <code>dictionary.txt</code>）</li><li><code>-t</code> 或 <code>--threads</code>：线程数（默认: 50）</li></ul><hr />]]></content>
      
      
      <categories>
          
          <category> Yohane-Mashiro </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf工具 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
